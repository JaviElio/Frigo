
Frigo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095e  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000594  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000380  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035d  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
   2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
   4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
   8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
   a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
   c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
   e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
  10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
  12:	34 c0       	rjmp	.+104    	; 0x7c <__bad_interrupt>
  14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
  16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
  18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
  1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
  1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>

0000001e <Mariobeats>:
  1e:	04 04 04 04 04 04 04 04 04 04 04 04 04              .............

0000002b <MarioOctave>:
  2b:	05 05 00 05 00 05 05 00 05 00 00 00 04              .............

00000038 <Marionotes>:
  38:	bc bc 00 bc 00 ed bc 00 9e 00 00 00 9e 00           ..............

00000046 <__ctors_end>:
  46:	11 24       	eor	r1, r1
  48:	1f be       	out	0x3f, r1	; 63
  4a:	cf e5       	ldi	r28, 0x5F	; 95
  4c:	d2 e0       	ldi	r29, 0x02	; 2
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	a0 e6       	ldi	r26, 0x60	; 96
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	ea e6       	ldi	r30, 0x6A	; 106
  5a:	f2 e0       	ldi	r31, 0x02	; 2
  5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
  5e:	05 90       	lpm	r0, Z+
  60:	0d 92       	st	X+, r0
  62:	a0 36       	cpi	r26, 0x60	; 96
  64:	b1 07       	cpc	r27, r17
  66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
  68:	20 e0       	ldi	r18, 0x00	; 0
  6a:	a0 e6       	ldi	r26, 0x60	; 96
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a2 36       	cpi	r26, 0x62	; 98
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	86 d0       	rcall	.+268    	; 0x186 <main>
  7a:	f5 c0       	rjmp	.+490    	; 0x266 <_exit>

0000007c <__bad_interrupt>:
  7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <playTone>:

int16_t count = 0;

void playTone(uint8_t tone, uint8_t octave) {

	TCCR1  = 0x90;						// clear TCNT1 on compare match
  7e:	90 e9       	ldi	r25, 0x90	; 144
  80:	90 bf       	out	0x30, r25	; 48
	OCR1C = tone-1;						// Set compare register
  82:	9f ef       	ldi	r25, 0xFF	; 255
  84:	98 0f       	add	r25, r24
  86:	9d bd       	out	0x2d, r25	; 45
	TCCR1 |=  (11-octave);				// Set prescaler / start counter
  88:	20 b7       	in	r18, 0x30	; 48
  8a:	9b e0       	ldi	r25, 0x0B	; 11
  8c:	96 1b       	sub	r25, r22
  8e:	92 2b       	or	r25, r18
  90:	90 bf       	out	0x30, r25	; 48
	if (tone==0) TCCR1 = 0x90;			// Stop timer1
  92:	81 11       	cpse	r24, r1
  94:	02 c0       	rjmp	.+4      	; 0x9a <playTone+0x1c>
  96:	80 e9       	ldi	r24, 0x90	; 144
  98:	80 bf       	out	0x30, r24	; 48
  9a:	08 95       	ret

0000009c <flashLed>:

}


void flashLed(void) {
	PORTB |= (1 << PB3);
  9c:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	80 e7       	ldi	r24, 0x70	; 112
  a2:	92 e0       	ldi	r25, 0x02	; 2
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <flashLed+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <flashLed+0x12>
  ae:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1 << PB3);
  b0:	c3 98       	cbi	0x18, 3	; 24
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <flashLed+0x1c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <flashLed+0x26>
  c2:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1 << PB3);
  c4:	c3 9a       	sbi	0x18, 3	; 24
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	80 e7       	ldi	r24, 0x70	; 112
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <flashLed+0x30>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <flashLed+0x3a>
  d6:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1 << PB3);
  d8:	c3 98       	cbi	0x18, 3	; 24
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	80 e7       	ldi	r24, 0x70	; 112
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <flashLed+0x44>
  e8:	00 c0       	rjmp	.+0      	; 0xea <flashLed+0x4e>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <playMario>:
	_delay_ms(100);
}



void playMario (void) {
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	0b e2       	ldi	r16, 0x2B	; 43
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	0f 2e       	mov	r0, r31
 104:	f8 e3       	ldi	r31, 0x38	; 56
 106:	ef 2e       	mov	r14, r31
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ff 2e       	mov	r15, r31
 10c:	f0 2d       	mov	r31, r0
 10e:	ce e1       	ldi	r28, 0x1E	; 30
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	0f 2e       	mov	r0, r31
 114:	f8 e3       	ldi	r31, 0x38	; 56
 116:	cf 2e       	mov	r12, r31
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	df 2e       	mov	r13, r31
 11c:	f0 2d       	mov	r31, r0
	//GTCCR |= (1 << COM1B0);																		// Connect timer to PB4 and toggle on CTC
		
	for (uint8_t i=0; i<Mariolength; i++) {

		//if (pgm_read_byte_near(Marionotes + i) != 0)	showColor();							// Change led colors if note changes
		playTone(pgm_read_byte_near(Marionotes + i), pgm_read_byte_near(MarioOctave + i));		// Play note
 11e:	f8 01       	movw	r30, r16
 120:	64 91       	lpm	r22, Z
 122:	f7 01       	movw	r30, r14
 124:	84 91       	lpm	r24, Z
 126:	ab df       	rcall	.-170    	; 0x7e <playTone>
		for(uint8_t j=0; j<pgm_read_byte_near(Mariobeats + i); j++) _delay_ms(35);				// delay to keep the note
 128:	fe 01       	movw	r30, r28
 12a:	84 91       	lpm	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	79 f0       	breq	.+30     	; 0x14e <playMario+0x60>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	ff eb       	ldi	r31, 0xBF	; 191
 134:	2a ed       	ldi	r18, 0xDA	; 218
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f1 50       	subi	r31, 0x01	; 1
 13a:	20 40       	sbci	r18, 0x00	; 0
 13c:	30 40       	sbci	r19, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <playMario+0x4a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <playMario+0x54>
 142:	00 00       	nop
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	fe 01       	movw	r30, r28
 148:	94 91       	lpm	r25, Z
 14a:	89 17       	cp	r24, r25
 14c:	90 f3       	brcs	.-28     	; 0x132 <playMario+0x44>

		TCCR1 = 0x00;																			// Stops timer. No idea why 0x90 does not work here.
 14e:	10 be       	out	0x30, r1	; 48
 150:	ff eb       	ldi	r31, 0xBF	; 191
 152:	2a ed       	ldi	r18, 0xDA	; 218
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f1 50       	subi	r31, 0x01	; 1
 158:	20 40       	sbci	r18, 0x00	; 0
 15a:	30 40       	sbci	r19, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <playMario+0x68>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <playMario+0x72>
 160:	00 00       	nop
 162:	0f 5f       	subi	r16, 0xFF	; 255
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	e8 1a       	sub	r14, r24
 16a:	f8 0a       	sbc	r15, r24
 16c:	21 96       	adiw	r28, 0x01	; 1

void playMario (void) {
		
	//GTCCR |= (1 << COM1B0);																		// Connect timer to PB4 and toggle on CTC
		
	for (uint8_t i=0; i<Mariolength; i++) {
 16e:	0c 15       	cp	r16, r12
 170:	1d 05       	cpc	r17, r13
 172:	a9 f6       	brne	.-86     	; 0x11e <playMario+0x30>
	}
		
	//GTCCR &= ~( 1 << COM1B0);																	// Disconnect from PB4
	//PORTB &= ~( 1 << PB4);																		// Switch off PB4
		
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	df 90       	pop	r13
 182:	cf 90       	pop	r12
 184:	08 95       	ret

00000186 <main>:


int main(void)
{
	
	DDRB |= (1 << PB4);					// Buzzer output
 186:	bc 9a       	sbi	0x17, 4	; 23
	DDRB |= (1 << PB3);					// LED output
 188:	bb 9a       	sbi	0x17, 3	; 23
	GTCCR |= (1 << COM1B0);				// Connect timer to PB4 and toggle on CTC
 18a:	8c b5       	in	r24, 0x2c	; 44
 18c:	80 61       	ori	r24, 0x10	; 16
 18e:	8c bd       	out	0x2c, r24	; 44

	// Setup power savings
	ADCSRA = 0;						// Disable ADC
 190:	16 b8       	out	0x06, r1	; 6
	PRR |= (1 << PRADC) | (1 << PRTIM0) | ( 1 << PRUSI) ;			// Power off ADC, USI, TIMER0
 192:	80 b5       	in	r24, 0x20	; 32
 194:	87 60       	ori	r24, 0x07	; 7
 196:	80 bd       	out	0x20, r24	; 32
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 198:	85 b7       	in	r24, 0x35	; 53
 19a:	87 7e       	andi	r24, 0xE7	; 231
 19c:	80 61       	ori	r24, 0x10	; 16
 19e:	85 bf       	out	0x35, r24	; 53
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	39 e6       	ldi	r19, 0x69	; 105
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	30 40       	sbci	r19, 0x00	; 0
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x20>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x2a>
 1b0:	00 00       	nop


	

	_delay_ms(1000);
	flashLed();
 1b2:	74 df       	rcall	.-280    	; 0x9c <flashLed>
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	2c e2       	ldi	r18, 0x2C	; 44
 1b8:	31 e3       	ldi	r19, 0x31	; 49
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	91 50       	subi	r25, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	30 40       	sbci	r19, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <main+0x36>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x42>
 1c8:	00 00       	nop
	_delay_ms(15000);
		
	
	// Aviso durante 30 segundos
	count = 6;
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 1d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
			
	while (count != 0)
	{
		playMario();
 1d6:	8b df       	rcall	.-234    	; 0xee <playMario>
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	21 e1       	ldi	r18, 0x11	; 17
 1dc:	3a e7       	ldi	r19, 0x7A	; 122
 1de:	91 50       	subi	r25, 0x01	; 1
 1e0:	20 40       	sbci	r18, 0x00	; 0
 1e2:	30 40       	sbci	r19, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x58>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x62>
 1e8:	00 00       	nop
		_delay_ms(5000);
		count--;
 1ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 1ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 1f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
		
	
	// Aviso durante 30 segundos
	count = 6;
			
	while (count != 0)
 1fc:	89 2b       	or	r24, r25
 1fe:	59 f7       	brne	.-42     	; 0x1d6 <main+0x50>
		_delay_ms(5000);
		count--;
	}

	// Alarma durante 5 min.
	count = 300;
 200:	8c e2       	ldi	r24, 0x2C	; 44
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 208:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	
	while (count != 0)
	{
		playTone(NOTE_F,5);
 20c:	65 e0       	ldi	r22, 0x05	; 5
 20e:	82 eb       	ldi	r24, 0xB2	; 178
 210:	36 df       	rcall	.-404    	; 0x7e <playTone>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	95 ea       	ldi	r25, 0xA5	; 165
 216:	2e e0       	ldi	r18, 0x0E	; 14
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	20 40       	sbci	r18, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x92>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x9c>
 222:	00 00       	nop
		_delay_ms(600);
		TCCR1 = 0x00;																			// Stops timer. No idea why 0x90 does not work here.
 224:	10 be       	out	0x30, r1	; 48

		playTone(NOTE_AS,5);
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	85 e8       	ldi	r24, 0x85	; 133
 22a:	29 df       	rcall	.-430    	; 0x7e <playTone>
 22c:	3f ef       	ldi	r19, 0xFF	; 255
 22e:	83 ec       	ldi	r24, 0xC3	; 195
 230:	99 e0       	ldi	r25, 0x09	; 9
 232:	31 50       	subi	r19, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0xac>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0xb6>
 23c:	00 00       	nop
		_delay_ms(400);
		TCCR1 = 0x00;																			// Stops timer. No idea why 0x90 does not work here.
 23e:	10 be       	out	0x30, r1	; 48

		count--;
 240:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 244:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 24e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	}

	// Alarma durante 5 min.
	count = 300;
	
	while (count != 0)
 252:	89 2b       	or	r24, r25
 254:	d9 f6       	brne	.-74     	; 0x20c <main+0x86>
		count--;
	}			

	// Sleep
	//sei();
	sleep_mode();					// Sleep.....
 256:	85 b7       	in	r24, 0x35	; 53
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	85 bf       	out	0x35, r24	; 53
 25c:	88 95       	sleep
 25e:	85 b7       	in	r24, 0x35	; 53
 260:	8f 7d       	andi	r24, 0xDF	; 223
 262:	85 bf       	out	0x35, r24	; 53
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stack+0x5>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
